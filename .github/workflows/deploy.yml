name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # 소스 코드 체크아웃
      - name: Checkout code
        uses: actions/checkout@v3

      # JDK 설치
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # Gradle 실행 권한 부여
      - name: Grant execute permission for Gradle
        run: chmod +x ./gradlew

      # 환경 변수 설정
      - name: Set environment variables
        run: |
          echo "AWS_ACCESS_KEY=${{ secrets.AWS_ACCESS_KEY }}" >> $GITHUB_ENV
          echo "AWS_SECRET_KEY=${{ secrets.AWS_SECRET_KEY }}" >> $GITHUB_ENV
          echo "AWS_REGION=${{ secrets.AWS_REGION }}" >> $GITHUB_ENV
          echo "AWS_BUCKET=${{ secrets.AWS_BUCKET }}" >> $GITHUB_ENV
          echo "EC2_HOST=${{ secrets.EC2_HOST }}" >> $GITHUB_ENV

      # Gradle 빌드
      - name: Build with Gradle
        run: ./gradlew clean build --exclude-task test

      # Docker 로그인 (DockerHub에 로그인)
      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Docker 이미지 빌드 및 푸시
      - name: Build and push Docker image
        run: |
          docker build -t xoo1228/s3imageupload:latest .
          docker push xoo1228/s3imageupload:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      # 디버깅: Secrets 값 확인
      - name: Debug secrets
        run: echo "EC2_HOST=${{ secrets.EC2_HOST }}"

      # SSH를 사용해 EC2에 접속하여 Docker 컨테이너 실행
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_KEY }} # Secrets에서 직접 참조
          port: 22
          debug: true
          script: |
            # Docker 설치 및 설정
            sudo apt update -y
            sudo apt remove -y docker docker-engine docker.io containerd runc || true
            curl -fsSL https://get.docker.com -o get-docker.sh
            sudo sh get-docker.sh
            sudo usermod -aG docker ubuntu

            # Docker 이미지 배포
            docker pull xoo1228/s3imageupload:latest
            docker stop s3imageupload || true
            docker rm -f s3imageupload || true
            docker run -d --name s3imageupload -p 8080:8080 \
                -e AWS_ACCESS_KEY=${AWS_ACCESS_KEY} \
                -e AWS_SECRET_KEY=${AWS_SECRET_KEY} \
                -e AWS_REGION=${AWS_REGION} \
                -e AWS_BUCKET=${AWS_BUCKET} \
                xoo1228/s3imageupload:latest

            # Docker 컨테이너 상태 확인
            docker ps -a
            docker logs s3imageupload
